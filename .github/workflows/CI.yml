name: CI

# Controls when the action will run. 
on: 
  workflow_dispatch:
  schedule:
    - cron: '0 21 */3 * *'

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build:
    name: build
    runs-on: ubuntu-20.04
    if: ${{ !(github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')) }}
    env:
      build_variant: ${{ matrix.build_variant }}
      targets: ${{ matrix.targets }}
      images_dir: /opt/images
    strategy:
      matrix:
        include:
          - build_variant: "Auto-1"
            targets: "360P2 5K-W20 A3004NS B70 DIR-878 DIR-878-5.0 DIR-882 DIR-882-5.0 E8820V2"
          - build_variant: "Auto-2"
            targets: "HC5761A HC5861B JCG-836PRO JCG-836PRO-5.0 JCG-AC860M-5.0 JCG-AC860M"
          - build_variant: "Auto-3"
            targets: "JCG-Y2-5.0 JCG-Y2 K2P-5.0 K2P-USB-5.0 K2P-USB K2P"
          - build_variant: "Auto-4"
            targets: "K2P_nano-5.0 K2P_nano MI-3 MI-MINI MI-NANO MI-R3G MR2600 MR2600-5.0"
          - build_variant: "Auto-5" 
            targets: "MSG1500 MZ-R13 MZ-R13P NEWIFI-MINI NEWIFI3 OYE-001 PSG1208 PSG1218"
          - build_variant: "Auto-6" 
            targets: "PSG1218_nano R2100 RM2100 RT-AC1200GU WDR7300 WR1200JS XY-C1"
    steps:
      - uses: actions/checkout@v2
      - name: Prepare environment
        run: |
          sudo apt update
          sudo apt install libtool-bin gperf python-docutils autopoint gettext
      - name: Run shellcheck
        run: sh ./trunk/tools/shellcheck.sh
      - name: Prepare toolchain
        run: |
          cd toolchain-mipsel
          sh dl_toolchain.sh
      - name: Start build
        run: |
          cd trunk
          mkdir -p ${images_dir}
          for m in $targets; do fakeroot ./build_firmware_ci $m; \
          if [ $? = 0 ]; then cp -f images/*.trx ${images_dir}/$m.trx; else exit 1; fi; \
          ./clear_tree_simple >/dev/null 2>&1; done
      - name: Create archive
        if: ${{ github.event_name != 'release' && success() }}
        run: |
          ls -lh ${images_dir}
          GIT_VERSION=`git rev-parse --short=7 HEAD 2>/dev/null` && [ -n "$GIT_VERSION" ] && \
          image_name=images_${build_variant}_${GIT_VERSION} || image_name=images_${build_variant}
          cd ${images_dir}; md5sum *.trx |tee md5sum.txt; 7z a -mx=9 ${image_name}.7z ./*
          echo "image_name=${image_name}" >> $GITHUB_ENV
          
      - name: Upload images to Artifact
        uses: actions/upload-artifact@v2.2.1
        with:
          name: ${{ env.image_name }}
          path: ${{ env.images_dir }}/*.7z
          
      - name: Upload images to Releases
        uses: svenstaro/upload-release-action@2.2.0
        with:
          repo_token: ${{ secrets.workflow_token }}
          file: ${{ env.images_dir }}/*.trx
          tag: padavan_$(date +%Y-%m-%d)"
          overwrite: true
          file_glob: true
