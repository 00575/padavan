name: test

on: 
  repository_dispatch:
  workflow_dispatch:
  #schedule:
    #- cron: 0 23 * * 5

jobs:
  build:
    name: build
    runs-on: ubuntu-20.04
    if: ${{ !(github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')) }}
    env:
      build_variant: ${{ matrix.build_variant }}
      targets: ${{ matrix.targets }}
      images_dir: /opt/images
    strategy:
      matrix:
        include:
          - build_variant: "A"
            targets: "GHL JCG-AC836M"
          - build_variant: "B"
            targets: "JDC-1-5.0 JDC-1"
          - build_variant: "C"
            targets: "MSG1500-7615 MZ-R18"
          - build_variant: "D"
            targets: "JCG-AC856M-5.0 K2P-USB-512"
          - build_variant: "E"
            targets: "NEWIFI-D1 PSG712"
          - build_variant: "F"
            targets: "RE6500 YK-L1"  
    steps:

      - name: Checkout
        uses: actions/checkout@master
      
      - name: Initialization environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo apt-get update
          sudo apt-get -y install unzip libtool-bin curl cmake gperf gawk flex bison nano xxd fakeroot \
          cpio git python-docutils gettext automake autopoint texinfo build-essential help2man \
          pkg-config zlib1g-dev libgmp3-dev libmpc-dev libmpfr-dev libncurses5-dev libltdl-dev wget
        
      - name: Run shellcheck
        run: |
          git clone --depth=1 https://github.com/hanwckf/rt-n56u.git /opt/rt-n56u
          #git clone --depth=1 https://github.com/chongshengB/rt-n56u.git /opt/rt-n56u
          cp -r ./configs/boards/. /opt/rt-n56u/trunk/configs/boards/
          cp -r ./configs/templates/. /opt/rt-n56u/trunk/configs/templates/
          . $GITHUB_WORKSPACE/patches.sh
          cd /opt/rt-n56u
          sh ./trunk/tools/shellcheck.sh
        
      - name: Prepare toolchain
        run: |
          cd /opt/rt-n56u/toolchain-mipsel
          sh dl_toolchain.sh
        
      - name: Start build
        run: |
          cd /opt/rt-n56u/trunk
          mkdir -p ${images_dir}
          for m in $targets; do fakeroot ./build_firmware_ci $m; \
          if [ $? = 0 ]; then cp -f images/*.trx ${images_dir}/$m.trx; else exit 1; fi; \
            ./clear_tree_simple >/dev/null 2>&1; done
            
      - name: Create archive
        if: ${{ github.event_name != 'release' && success() }}
        run: |
          GIT_VERSION=`git rev-parse --short=7 HEAD 2>/dev/null` && [ -n "$GIT_VERSION" ] && \
          image_name=images_${build_variant}_${GIT_VERSION} || image_name=images_${build_variant}
          cd /opt/images; md5sum *.trx |tee md5sum.txt; 7z a -mx=9 ${image_name}.7z ./*
          echo "image_name=${image_name}" >> $GITHUB_ENV
          
      - name: Generate release tag
        id: tag
        run: |
          echo "::set-output name=release_tag::test_$(date +%Y-%m-%d)"
          touch release.txt
          echo "::set-output name=status::success"
        
      - name: Upload firmware to release
        uses: softprops/action-gh-release@v1
        if: steps.tag.outputs.status == 'success' && !cancelled()
        env:
          GITHUB_TOKEN: ${{ secrets.workflow_token }}
        with:
          tag_name: ${{ steps.tag.outputs.release_tag }}
          body_path: release.txt
          files: /opt/images/*.trx
